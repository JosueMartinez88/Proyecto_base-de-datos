/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package BD_Alumnos.com.app.mvc.view;
import BD_Alumnos.com.app.mvc.controller.OperacionesBD;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;



/*
 *En esta clase nos va amostrar los resultados de lo que hagamos según las consultas
 * @author García Agustin Christian Santiago
 * @author Martínez Vera Josué Aldair
 * @author Mejía López Luis David
 * @author Solís Contreras Darian Giselle
 */

public class lobby extends javax.swing.JFrame {
    /** Objeto para realizar operaciones sobre la base de datos */
    private OperacionesBD operacionesBD;
    /** Logger para registrar información y errores */
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(lobby.class.getName());
    /** Nombre de la tabla principal que se carga al iniciar la aplicación */
    private String tablaPrincipal = null;
    
    /**
     * Constructor de la clase lobby.
     * Inicializa componentes, conecta a la base de datos con las credenciales actuales y
     * carga la primera tabla disponible.
     */
    public lobby() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(getClass().getResource("/BD_Alumnos/com/app/mvc/images/resourceBD.png")).getImage());
        
        // Se crea el objeto para manejar operaciones de BD con las credenciales actuales
        operacionesBD = new OperacionesBD(
            BD_Alumnos.com.app.mvc.controller.Sesion.getUsuario(),
            BD_Alumnos.com.app.mvc.controller.Sesion.getContrasena(),
            BD_Alumnos.com.app.mvc.controller.Sesion.getBaseDatos()
        );
        try {
            // Se intenta obtener la lista de tablas y cargar la primera
            java.util.List<String> tablas = operacionesBD.mostrarTablas();
            if (!tablas.isEmpty()) {
                tablaPrincipal = tablas.get(0); // Guardar tabla principal
                mostrarTabla(tablaPrincipal);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró ninguna tabla en la base de datos.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al mostrar tabla: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
 /**
     * Llena la JTable 'resultados' con los datos proporcionados por un ResultSet.
     *
     * @param rs ResultSet que contiene los datos obtenidos de la base de datos.
*/
public void cargarResultados(ResultSet rs) {
    try {
        ResultSetMetaData metaData = rs.getMetaData();
        int columnas = metaData.getColumnCount();

        DefaultTableModel modelo = new DefaultTableModel();
        
        // Añadir los nombres de columnas al modelo
        for (int i = 1; i <= columnas; i++) {
            modelo.addColumn(metaData.getColumnName(i));
        }

        // Añadir las filas al modelo
        while (rs.next()) {
            Object[] fila = new Object[columnas];
            for (int i = 1; i <= columnas; i++) {
                fila[i - 1] = rs.getObject(i);
            }
            modelo.addRow(fila);
        }
        // Establecer el modelo a la tabla
        resultados.setModel(modelo);

        rs.close();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar datos en la tabla: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
/**
     * Muestra el contenido de la tabla especificada dentro de la JTable 'resultados'.
     *
     * @param nombreTabla Nombre de la tabla que se desea visualizar.
*/
public void mostrarTabla(String nombreTabla) {
    ResultSet rs = operacionesBD.mostrarContenidoTabla(nombreTabla);
    if (rs != null) {
        cargarResultados(rs);
    } else {
        JOptionPane.showMessageDialog(this, "No se pudo obtener datos de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgLobby = new javax.swing.JPanel();
        operacionesTabbed = new javax.swing.JTabbedPane();
        panelOp1 = new javax.swing.JPanel();
        consultarLabel = new javax.swing.JLabel();
        consultarButton = new javax.swing.JButton();
        insertarLabel = new javax.swing.JLabel();
        insertarButton = new javax.swing.JButton();
        insertarLabel1 = new javax.swing.JLabel();
        eliminarButton = new javax.swing.JButton();
        panelOp2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        operacionManual = new javax.swing.JTextArea();
        ejecutarOp = new javax.swing.JButton();
        resetTabla = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultados = new javax.swing.JTable();
        actualizarTabla = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        homeButton = new javax.swing.JMenu();
        itemReturnLogin = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1080, 720));
        setPreferredSize(new java.awt.Dimension(1080, 720));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bgLobby.setBackground(new java.awt.Color(255, 255, 255));
        bgLobby.setForeground(new java.awt.Color(0, 0, 0));
        bgLobby.setPreferredSize(new java.awt.Dimension(1080, 720));

        operacionesTabbed.setOpaque(true);

        panelOp1.setBackground(new java.awt.Color(204, 204, 204));

        consultarLabel.setBackground(new java.awt.Color(26, 26, 26));
        consultarLabel.setForeground(new java.awt.Color(255, 255, 255));
        consultarLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        consultarLabel.setText("Consultar");
        consultarLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(30, 30, 30)));
        consultarLabel.setOpaque(true);

        consultarButton.setIcon(new ImageIcon(getClass().getResource("/BD_Alumnos/com/app/mvc/images/resourceEnviar.png")));
        consultarButton.setFocusPainted(false);
        consultarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consultarButtonMouseClicked(evt);
            }
        });

        insertarLabel.setBackground(new java.awt.Color(26, 26, 26));
        insertarLabel.setForeground(new java.awt.Color(255, 255, 255));
        insertarLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        insertarLabel.setText("Insertar");
        insertarLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(30, 30, 30)));
        insertarLabel.setOpaque(true);

        insertarButton.setIcon(new ImageIcon(getClass().getResource("/BD_Alumnos/com/app/mvc/images/resourceEnviar.png")));
        insertarButton.setFocusPainted(false);
        insertarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertarButtonMouseClicked(evt);
            }
        });

        insertarLabel1.setBackground(new java.awt.Color(26, 26, 26));
        insertarLabel1.setForeground(new java.awt.Color(255, 255, 255));
        insertarLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        insertarLabel1.setText("Eliminar");
        insertarLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(30, 30, 30)));
        insertarLabel1.setOpaque(true);

        eliminarButton.setIcon(new ImageIcon(getClass().getResource("/BD_Alumnos/com/app/mvc/images/resourceEnviar.png")));
        eliminarButton.setFocusPainted(false);
        eliminarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eliminarButtonMouseClicked(evt);
            }
        });
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOp1Layout = new javax.swing.GroupLayout(panelOp1);
        panelOp1.setLayout(panelOp1Layout);
        panelOp1Layout.setHorizontalGroup(
            panelOp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOp1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(panelOp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOp1Layout.createSequentialGroup()
                        .addComponent(insertarLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelOp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelOp1Layout.createSequentialGroup()
                            .addComponent(insertarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(insertarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelOp1Layout.createSequentialGroup()
                            .addComponent(consultarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(consultarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        panelOp1Layout.setVerticalGroup(
            panelOp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOp1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(panelOp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(consultarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(consultarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(panelOp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(insertarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(insertarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelOp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(insertarLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        operacionesTabbed.addTab("Operaciones", panelOp1);

        panelOp2.setBackground(new java.awt.Color(204, 204, 204));

        operacionManual.setColumns(20);
        operacionManual.setRows(5);
        jScrollPane2.setViewportView(operacionManual);

        ejecutarOp.setText("Ejecutar");
        ejecutarOp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ejecutarOpMouseClicked(evt);
            }
        });
        ejecutarOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarOpActionPerformed(evt);
            }
        });

        resetTabla.setText("Resetear");
        resetTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetTablaMouseClicked(evt);
            }
        });
        resetTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTablaActionPerformed(evt);
            }
        });

        infoLabel.setForeground(new java.awt.Color(0, 0, 0));
        infoLabel.setText("DBTableName = alumnos");

        javax.swing.GroupLayout panelOp2Layout = new javax.swing.GroupLayout(panelOp2);
        panelOp2.setLayout(panelOp2Layout);
        panelOp2Layout.setHorizontalGroup(
            panelOp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOp2Layout.createSequentialGroup()
                .addGroup(panelOp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelOp2Layout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelOp2Layout.createSequentialGroup()
                            .addGap(48, 48, 48)
                            .addComponent(ejecutarOp)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resetTabla)))
                    .addGroup(panelOp2Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(infoLabel)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        panelOp2Layout.setVerticalGroup(
            panelOp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOp2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(infoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelOp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ejecutarOp)
                    .addComponent(resetTabla))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        operacionesTabbed.addTab("Operaciones Manuales", panelOp2);

        resultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(resultados);

        actualizarTabla.setText("Actualizar");
        actualizarTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actualizarTablaMouseClicked(evt);
            }
        });
        actualizarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarTablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLobbyLayout = new javax.swing.GroupLayout(bgLobby);
        bgLobby.setLayout(bgLobbyLayout);
        bgLobbyLayout.setHorizontalGroup(
            bgLobbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLobbyLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(bgLobbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operacionesTabbed, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        bgLobbyLayout.setVerticalGroup(
            bgLobbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLobbyLayout.createSequentialGroup()
                .addGroup(bgLobbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLobbyLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(operacionesTabbed, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actualizarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLobbyLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 89, Short.MAX_VALUE))
        );

        operacionesTabbed.getAccessibleContext().setAccessibleDescription("");

        getContentPane().add(bgLobby, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 720));

        menuBar.setBackground(new java.awt.Color(102, 102, 102));
        menuBar.setForeground(new java.awt.Color(255, 255, 255));

        homeButton.setIcon(new ImageIcon(getClass().getResource("/BD_Alumnos/com/app/mvc/images/resourceReloadBD.png")));
        homeButton.setText("Change BD");

        itemReturnLogin.setIcon(new ImageIcon(getClass().getResource("/BD_Alumnos/com/app/mvc/images/resourceVolver.png")));
        itemReturnLogin.setText("Regresar al Login");
        itemReturnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemReturnLoginActionPerformed(evt);
            }
        });
        homeButton.add(itemReturnLogin);

        menuBar.add(homeButton);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Este método permite el accionar el boton de consultas
     * 
     */
    private void consultarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultarButtonMouseClicked
        consultas goConsultas = new consultas();
        goConsultas.setVisible(true);
    }//GEN-LAST:event_consultarButtonMouseClicked

    /**
     * Este método nos perite el ejercutar las consultas que hagamso
     * 
    */
    private void ejecutarOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarOpActionPerformed
        String sql = operacionManual.getText().trim();
        if (sql.isEmpty()) { //NOs dice si la consulta no contiene nada, si está vacia
            JOptionPane.showMessageDialog(this, "Por favor, escribe una operación SQL.");
            return;
        }
        try {
            // Si es SELECT, muestra el resultado en la tabla
            if (sql.toLowerCase().startsWith("select")) {
                ResultSet rs = operacionesBD.ejecutarConsulta(sql);
                if (rs != null) {
                    cargarResultados(rs);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo ejecutar la consulta.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Para INSERT, UPDATE, DELETE, etc.
                java.sql.Connection con = operacionesBD.getConnection();
                java.sql.Statement stmt = con.createStatement();
                int afectados = stmt.executeUpdate(sql);
                JOptionPane.showMessageDialog(this, "Operación ejecutada correctamente. Filas afectadas: " + afectados);
                stmt.close();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar la operación: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ejecutarOpActionPerformed

    private void ejecutarOpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ejecutarOpMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ejecutarOpMouseClicked

    /**
     * Actualiza la tabla mostrada refrescando su contenido desde la base de datos.
     * Este método se invoca al presionar el botón "Actualizar Tabla".
     *
     * @param evt Evento de acción generado por el botón.
    */
    private void actualizarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarTablaActionPerformed
         if (tablaPrincipal != null) {
            mostrarTabla(tablaPrincipal);
        } else {
            JOptionPane.showMessageDialog(this, "No hay tabla principal definida para actualizar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_actualizarTablaActionPerformed
    /**
     * Evento generado al hacer clic con el mouse sobre el botón actualizarTabla.
     * Actualmente sin implementación.
     *
     * @param evt Evento de mouse.
    */
    private void actualizarTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizarTablaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_actualizarTablaMouseClicked

    private void resetTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetTablaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_resetTablaMouseClicked

    /**
     * Reinicia la tabla principal mostrando su contenido original.
     * Además, limpia el área de texto para operaciones manuales.
     *
     * @param evt Evento de acción generado por el botón resetTabla.
     */
    private void resetTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTablaActionPerformed
       if (tablaPrincipal != null) {
            mostrarTabla(tablaPrincipal);
            // Limpia también el área de operaciones manuales si quieres:
            operacionManual.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "No hay tabla principal definida para resetear.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_resetTablaActionPerformed

    /**
     * Evento que maneja la inserción de un nuevo alumno.
     * Solicita datos al usuario mediante cuadros de diálogo, valida y realiza
     * la inserción en la base de datos.
     *
     * @param evt Evento de mouse generado al hacer clic en el botón insertarButton.
    */
    private void insertarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertarButtonMouseClicked
        String nombres = JOptionPane.showInputDialog(this, "Nombre(s) del alumno:");
            if (nombres == null || nombres.trim().isEmpty()) return;

            String edadStr = JOptionPane.showInputDialog(this, "Edad del alumno:");
            if (edadStr == null || edadStr.trim().isEmpty()) return;
            int edad;
            try {
                edad = Integer.parseInt(edadStr.trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Edad inválida.");
                return;
            }

            String carrera = JOptionPane.showInputDialog(this, "Carrera del alumno:");
            if (carrera == null || carrera.trim().isEmpty()) return;

            try {
                String sql = "INSERT INTO alumno (nombres, edad, carrera) VALUES ('" +
                              nombres.replace("'", "''") + "', " + edad + ", '" +
                              carrera.replace("'", "''") + "')";
                java.sql.Connection con = operacionesBD.getConnection();
                java.sql.Statement stmt = con.createStatement();
                int afectados = stmt.executeUpdate(sql);
                stmt.close();
                JOptionPane.showMessageDialog(this, "Alumno insertado correctamente. Filas afectadas: " + afectados);

                // Actualiza la tabla principal para reflejar el cambio
                if (tablaPrincipal != null) {
                    mostrarTabla(tablaPrincipal);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al insertar alumno: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_insertarButtonMouseClicked

    /**
     * Evento generado al hacer clic con el mouse sobre el botón eliminarButton.
     * Actualmente sin implementación.
     *
     * @param evt Evento de mouse.
    */
    private void eliminarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminarButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_eliminarButtonMouseClicked

    /**
     * Cierra la sesión actual y regresa a la ventana de login.
     *
     * @param evt Evento de acción generado por el item del menú para regresar al login.
    */
    private void itemReturnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemReturnLoginActionPerformed
    if (operacionesBD != null) {
        operacionesBD.cerrarConexion();
    }
    BD_Alumnos.com.app.mvc.view.login login = new BD_Alumnos.com.app.mvc.view.login();
    login.setVisible(true);
    this.dispose();
    }//GEN-LAST:event_itemReturnLoginActionPerformed

    /**
     * Elimina un alumno de la base de datos mediante el ID ingresado por el usuario.
     * Pide confirmación antes de realizar la eliminación y actualiza la tabla al finalizar.
     *
     * @param evt Evento de acción generado por el botón eliminarButton.
    */
    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
         String idStr = JOptionPane.showInputDialog(this, "Ingrese el ID del alumno a eliminar:");
         if (idStr == null || idStr.trim().isEmpty()) return;
         int id;
         try {
             id = Integer.parseInt(idStr.trim());
         } catch (NumberFormatException e) {
             JOptionPane.showMessageDialog(this, "ID inválido. Debe ser un número.");
             return;
         }

         int confirm = JOptionPane.showConfirmDialog(this, "¿Seguro que deseas eliminar el alumno con ID " + id + "?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
         if (confirm != JOptionPane.YES_OPTION) return;

         boolean exito = operacionesBD.borrarAlumnoPorId(tablaPrincipal, id);
         if (exito) {
             JOptionPane.showMessageDialog(this, "Alumno eliminado correctamente.");
             mostrarTabla(tablaPrincipal);
         } else {
             JOptionPane.showMessageDialog(this, "No se pudo eliminar el alumno. Verifica el ID.");
         }
    }//GEN-LAST:event_eliminarButtonActionPerformed

    /**
     * Método principal para hacer ufncionar la aplicación
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new lobby().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarTabla;
    private javax.swing.JPanel bgLobby;
    private javax.swing.JButton consultarButton;
    private javax.swing.JLabel consultarLabel;
    private javax.swing.JButton ejecutarOp;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JMenu homeButton;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JButton insertarButton;
    private javax.swing.JLabel insertarLabel;
    private javax.swing.JLabel insertarLabel1;
    private javax.swing.JMenuItem itemReturnLogin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea operacionManual;
    private javax.swing.JTabbedPane operacionesTabbed;
    private javax.swing.JPanel panelOp1;
    private javax.swing.JPanel panelOp2;
    private javax.swing.JButton resetTabla;
    private javax.swing.JTable resultados;
    // End of variables declaration//GEN-END:variables
}
